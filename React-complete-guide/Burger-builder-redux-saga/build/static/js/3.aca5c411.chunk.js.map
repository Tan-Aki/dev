{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.scss","shared/utility.js","components/Order/CheckoutSummary/CheckoutSummary.module.scss","containers/Checkout/ContactData/ContactData.module.scss"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","console","log","ings","formData","formElementIdentifier","hasOwnProperty","order","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","setState","formElementsArray","key","push","Input","changed","this","form","onSubmit","disabled","loading","Spinner","Component","connect","burgerBuilderReducer","totalPrice","orderReducer","authReducer","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","validationError","Invalid","ValidationError","join","onChange","map","option","Label","label","module","exports","rules","isValid","trim","length","test","isNumeric"],"mappings":"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","file":"static/js/3.aca5c411.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Burger from \"../../Burger/Burger\";\nimport Button from \"../../UI/Button/Button\";\nimport classes from \"./CheckoutSummary.module.scss\";\n\nconst checkoutSummary = (props) => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it tastes well !</h1>\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\n        CANCEL\n      </Button>\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\n        CONTINUE\n      </Button>\n    </div>\n  );\n};\n\ncheckoutSummary.propTypes = {};\n\nexport default checkoutSummary;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.scss\";\nimport axios from \"../../../axios-orders\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/order\";\nimport { checkValidity } from \"../../../shared/utility\";\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Zip Code\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Email\",\n        },\n        value: \"\",\n        validation: {\n          isEmail: true,\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"fastest\", displayValue: \"Fastest\" },\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\n          ],\n        },\n        value: \"fastest\",\n        validation: {},\n        touched: false,\n        valid: true,\n      },\n    },\n    formIsValid: false,\n  };\n\n  // orderHandler = async (event) => {\n  //   event.preventDefault();\n  //   console.log(this.props.ingredients);\n\n  //   this.setState({ loading: true });\n\n  //   const formData = {};\n\n  //   for (let formElementIdentifier in this.state.orderForm) {\n  //     if (this.state.orderForm.hasOwnProperty(formElementIdentifier)) {\n  //       formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n  //     }\n  //   }\n\n  //   const order = {\n  //     ingredients: this.props.ings,\n  //     price: this.props.price, // shouldnt be done in production environement. should be calculated server side to avoid data being tempered\n  //     orderData: formData,\n  //   };\n  //   try {\n  //     const response = await axios.post(\"/orders.json\", order); // .json for firebase\n  //     console.log(\"response :\", response);\n  //     this.setState({ loading: false });\n  //     this.props.history.push(\"/\");\n  //   } catch (err) {\n  //     console.log(err);\n  //     this.setState({ loading: false });\n  //   }\n  // };\n  orderHandler = (event) => {\n    event.preventDefault();\n    console.log(this.props.ings);\n\n    const formData = {};\n\n    for (let formElementIdentifier in this.state.orderForm) {\n      if (this.state.orderForm.hasOwnProperty(formElementIdentifier)) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n    }\n\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price, // shouldnt be done in production environement. should be calculated server side to avoid data being tempered\n      orderData: formData,\n      userId: this.props.userId,\n    };\n\n    this.props.onOrderBurger(order, this.props.token);\n  };\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    // what follows is deep copying\n\n    const updatedOrderForm = { ...this.state.orderForm };\n\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier] };\n\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = checkValidity(\n      event.target.value,\n      this.state.orderForm[inputIdentifier].validation\n    );\n    updatedFormElement.touched = true;\n\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      if (updatedOrderForm.hasOwnProperty(inputIdentifier)) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n    }\n\n    this.setState({ orderForm: updatedOrderForm, formIsValid });\n  };\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push(\n        <Input\n          key={key}\n          {...this.state.orderForm[key]}\n          changed={(event) => {\n            this.inputChangedHandler(event, key);\n          }}\n        />\n      );\n    }\n\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {/* <Input elementType=\"...\" elementConfig=\"...\" value=\"...\" /> */}\n        {formElementsArray}\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ings: state.burgerBuilderReducer.ingredients,\n  price: state.burgerBuilderReducer.totalPrice,\n  loading: state.orderReducer.loading,\n  token: state.authReducer.token,\n  userId: state.authReducer.userId,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\n","import React, { Component } from \"react\";\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport ContactData from \"./ContactData/ContactData\";\nimport * as actions from \"../../store/actions/index\";\n\nclass Checkout extends Component {\n  // state = {\n  //   ingredients: null,\n  //   price: 0,\n  // };\n\n  // componentWillMount() {\n  //   const query = new URLSearchParams(this.props.location.search);\n  //   const ingredients = {};\n  //   console.log(query.entries);\n  //   let price = 0;\n\n  //   for (let param of query.entries()) {\n  //     //['salad', '1']\n\n  //     if (param[0] === \"price\") {\n  //       price = param[1];\n  //     } else {\n  //       ingredients[param[0]] = +param[1]; // converted to number by adding a +\n  //     }\n  //   }\n\n  //   this.setState({ ingredients, totalPrice: price });\n  // }\n\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n\n  render() {\n    let summary = <Redirect to=\"/\" />;\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler}\n          />\n          <Route\n            path={this.props.match.path + \"/contact-data\"}\n            component={ContactData}\n\n            // trick to pass some props to the route, instead of using Component, we use render with an arrow function\n            // we don't get the props history property with that though..\n            // so we pass the props we got from the checkout route to the COntactData\n          />\n        </div>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ings: state.burgerBuilderReducer.ingredients,\n  purchased: state.orderReducer.purchased,\n});\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classes from \"./Input.module.scss\";\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n  let validationError = null;\n\n  if (!props.valid && props.validation && props.touched) {\n    inputClasses.push(classes.Invalid);\n    validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      let options = props.elementConfig.options.map((option) => {\n        return (\n          <option key={option.value} value={option.value}>\n            {option.displayValue}\n          </option>\n        );\n      });\n      inputElement = (\n        <select className={inputClasses.join(\" \")} value={props.value} onChange={props.changed}>\n          {options}\n        </select>\n      );\n      break;\n\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}> {props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\ninput.propTypes = {};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__SNRl4\",\"Label\":\"Input_Label__3w96u\",\"InputElement\":\"Input_InputElement__pO52w\",\"Invalid\":\"Input_Invalid__3aeyU\",\"ValidationError\":\"Input_ValidationError__2fHal\"};","export const checkValidity = (value, rules) => {\n  let isValid = true;\n  if (!rules) {\n    return true;\n  }\n\n  if (rules.required) {\n    isValid = value.trim() !== \"\" && isValid;\n  }\n\n  if (rules.minLength) {\n    isValid = value.length >= rules.minLength && isValid;\n  }\n\n  if (rules.maxLength) {\n    isValid = value.length <= rules.maxLength && isValid;\n  }\n\n  if (rules.isEmail) {\n    const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isNumeric) {\n    const pattern = /^\\d+$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  return isValid;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3QfUK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2aETv\"};"],"sourceRoot":""}