{"version":3,"sources":["containers/Auth/Auth.module.scss","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.scss","shared/utility.js"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","authReducer","token","burgerBuilderReducer","building","dispatch","actions","path","input","inputElement","inputClasses","InputElement","validationError","Invalid","ValidationError","join","onChange","options","map","option","displayValue","Input","Label","label","rules","isValid","trim","length","maxLength","test","isNumeric"],"mappings":"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","file":"static/js/4.a3f59a49.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__7JmWy\"};","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.scss\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { checkValidity } from \"../../shared/utility\";\n\nimport * as actions from \"../../store/actions/index\";\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Mail Address\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignup: true,\n  };\n\n  //////////////////////// Hey ! I agree with you, I feel like it's unnecessary since we\n  // redirect to \"/\" in the Checkout component when we don't have any ingredients.\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath(\"/\");\n    }\n  }\n  ////////////////////////////////////////////////////////////////////////////\n\n  inputChangedHandler = (event, controlName) => {\n    // what follows is deep copying\n\n    // const updatedControls = { ...this.state.controls };\n\n    // const updatedControl = { ...updatedControls[controlName] };\n\n    // updatedControl.value = event.target.value;\n    // updatedControl.valid = this.checkValidity(updatedControl.value, updatedControl.validation);\n    // updatedControl.touched = true;\n\n    // updatedControls[controlName] = updatedControl;\n\n    // same as above\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true,\n      },\n    };\n\n    // let formIsValid = true;\n    // for (let controlName in updatedControls) {\n    //   if (updatedControls.hasOwnProperty(controlName)) {\n    //     formIsValid = updatedControls[controlName].valid && formIsValid;\n    //   }\n    // }\n\n    // this.setState({ controls: updateControls, formIsValid });\n\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignup\n    );\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState((prevState) => {\n      return { isSignup: !prevState.isSignup };\n    });\n  };\n\n  render() {\n    let formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push(\n        <Input\n          key={key}\n          {...this.state.controls[key]}\n          changed={(event) => {\n            this.inputChangedHandler(event, key);\n            {\n              /* <Input key=\"...\" elementType=\"...\" elementConfig=\"{...}\" value=\"...\" changed=\"...\"/> */\n            }\n          }}\n        />\n      );\n    }\n\n    if (this.props.loading) {\n      formElementsArray = <Spinner />;\n    }\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>;\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {formElementsArray}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.authReducer.loading,\n  error: state.authReducer.error,\n  isAuthenticated: state.authReducer.token !== null,\n  authRedirectPath: state.authReducer.authRedirectPath,\n  buildingBurger: state.burgerBuilderReducer.building,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n  onSetAuthRedirectPath: (path) => dispatch(actions.setAuthRedirectPath(path)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classes from \"./Input.module.scss\";\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n  let validationError = null;\n\n  if (!props.valid && props.validation && props.touched) {\n    inputClasses.push(classes.Invalid);\n    validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      let options = props.elementConfig.options.map((option) => {\n        return (\n          <option key={option.value} value={option.value}>\n            {option.displayValue}\n          </option>\n        );\n      });\n      inputElement = (\n        <select className={inputClasses.join(\" \")} value={props.value} onChange={props.changed}>\n          {options}\n        </select>\n      );\n      break;\n\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}> {props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\ninput.propTypes = {};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__SNRl4\",\"Label\":\"Input_Label__3w96u\",\"InputElement\":\"Input_InputElement__pO52w\",\"Invalid\":\"Input_Invalid__3aeyU\",\"ValidationError\":\"Input_ValidationError__2fHal\"};","export const checkValidity = (value, rules) => {\n  let isValid = true;\n  if (!rules) {\n    return true;\n  }\n\n  if (rules.required) {\n    isValid = value.trim() !== \"\" && isValid;\n  }\n\n  if (rules.minLength) {\n    isValid = value.length >= rules.minLength && isValid;\n  }\n\n  if (rules.maxLength) {\n    isValid = value.length <= rules.maxLength && isValid;\n  }\n\n  if (rules.isEmail) {\n    const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isNumeric) {\n    const pattern = /^\\d+$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  return isValid;\n};\n"],"sourceRoot":""}