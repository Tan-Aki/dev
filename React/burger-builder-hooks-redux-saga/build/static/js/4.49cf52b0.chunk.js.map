{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","shared/utility.js","containers/Auth/Auth.module.scss","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","validationError","valid","validation","touched","push","Invalid","className","ValidationError","elementType","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","connect","state","loading","authReducer","error","isAuthenticated","token","authRedirectPath","buildingBurger","burgerBuilderReducer","building","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","path","useState","type","placeholder","controls","setControls","setIsSignup","useEffect","formElementsArray","event","controlName","updatedControls","target","inputChangedHandler","errorMessage","message","authRedirect","to","Auth","onSubmit","preventDefault","btnType","clicked","prevState"],"mappings":"wHAAA,sCAyEeA,IArED,SAACC,GACb,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAQC,cAC1BC,EAAkB,KAOtB,QALKL,EAAMM,OAASN,EAAMO,YAAcP,EAAMQ,UAC5CN,EAAaO,KAAKN,IAAQO,SAC1BL,EAAkB,uBAAGM,UAAWR,IAAQS,iBAAtB,gCAGZZ,EAAMa,aACZ,IAAK,QACHZ,EACE,yCACEU,UAAWT,EAAaY,KAAK,MACzBd,EAAMe,cAFZ,CAGEC,MAAOhB,EAAMgB,MACbC,SAAUjB,EAAMkB,WAGpB,MACF,IAAK,WACHjB,EACE,4CACEU,UAAWT,EAAaY,KAAK,MACzBd,EAAMe,cAFZ,CAGEC,MAAOhB,EAAMgB,MACbC,SAAUjB,EAAMkB,WAGpB,MACF,IAAK,SACH,IAAIC,EAAUnB,EAAMe,cAAcI,QAAQC,KAAI,SAACC,GAC7C,OACE,4BAAQC,IAAKD,EAAOL,MAAOA,MAAOK,EAAOL,OACtCK,EAAOE,iBAIdtB,EACE,4BAAQU,UAAWT,EAAaY,KAAK,KAAME,MAAOhB,EAAMgB,MAAOC,SAAUjB,EAAMkB,SAC5EC,GAGL,MAEF,QACElB,EACE,yCACEU,UAAWT,EAAaY,KAAK,MACzBd,EAAMe,cAFZ,CAGEC,MAAOhB,EAAMgB,MACbC,SAAUjB,EAAMkB,WAMxB,OACE,yBAAKP,UAAWR,IAAQqB,OACtB,2BAAOb,UAAWR,IAAQsB,OAA1B,IAAmCzB,EAAM0B,OACxCzB,EACAI,K,oBCjEPsB,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,uBAAuB,gBAAkB,iC,iCCD1K,kCAAO,IAAMC,EAAgB,SAACb,EAAOc,GACnC,IAAIC,GAAU,EACd,IAAKD,EACH,OAAO,EAeT,GAZIA,EAAME,WACRD,EAA2B,KAAjBf,EAAMiB,QAAiBF,GAG/BD,EAAMI,YACRH,EAAUf,EAAMmB,QAAUL,EAAMI,WAAaH,GAG3CD,EAAMM,YACRL,EAAUf,EAAMmB,QAAUL,EAAMM,WAAaL,GAG3CD,EAAMO,QAAS,CAEjBN,EADgB,wIACEO,KAAKtB,IAAUe,EAGnC,GAAID,EAAMS,UAAW,CAEnBR,EADgB,QACEO,KAAKtB,IAAUe,EAGnC,OAAOA,I,oBC3BTJ,EAAOC,QAAU,CAAC,KAAO,qB,8JCuKVY,uBAbS,SAACC,GAAD,MAAY,CAClCC,QAASD,EAAME,YAAYD,QAC3BE,MAAOH,EAAME,YAAYC,MACzBC,gBAA6C,OAA5BJ,EAAME,YAAYG,MACnCC,iBAAkBN,EAAME,YAAYI,iBACpCC,eAAgBP,EAAMQ,qBAAqBC,aAGlB,SAACC,GAAD,MAAe,CACxCC,OAAQ,SAACC,EAAOC,EAAUC,GAAlB,OAA+BJ,EAASK,IAAaH,EAAOC,EAAUC,KAC9EE,sBAAuB,SAACC,GAAD,OAAUP,EAASK,IAA4BE,QAGzDlB,EA7JF,SAACxC,GAAW,IAAD,EACU2D,mBAAS,CACvCN,MAAO,CACLxC,YAAa,QACbE,cAAe,CACb6C,KAAM,QACNC,YAAa,gBAEf7C,MAAO,GACPT,WAAY,CACVyB,UAAU,EACVK,SAAS,GAEX/B,OAAO,EACPE,SAAS,GAEX8C,SAAU,CACRzC,YAAa,QACbE,cAAe,CACb6C,KAAM,WACNC,YAAa,YAEf7C,MAAO,GACPT,WAAY,CACVyB,UAAU,EACVE,UAAW,GAEb5B,OAAO,EACPE,SAAS,KA5BS,mBACfsD,EADe,KACLC,EADK,OAgCUJ,oBAAS,GAhCnB,mBAgCfJ,EAhCe,KAgCLS,EAhCK,KAuCdhB,EAA4DhD,EAA5DgD,eAAgBD,EAA4C/C,EAA5C+C,iBAAkBU,EAA0BzD,EAA1ByD,sBAE1CQ,qBAAU,WACHjB,GAAuC,MAArBD,GACrBU,EAAsB,OAEvB,CAACT,EAAgBD,EAAkBU,IAGtC,IAkDIS,EAAoB,GAlGF,WAoGb5C,GACP4C,EAAkBzD,KAChB,kBAAC,IAAD,eACEa,IAAKA,GACDwC,EAASxC,GAFf,CAGEJ,QAAS,SAACiD,IAzDY,SAACA,EAAOC,GAclC,IAAMC,EAAe,eAChBP,EADgB,eAElBM,EAFkB,eAGdN,EAASM,GAHK,CAIjBpD,MAAOmD,EAAMG,OAAOtD,MACpBV,MAAOuB,YAAcsC,EAAMG,OAAOtD,MAAO8C,EAASM,GAAa7D,YAC/DC,SAAS,MAcbuD,EAAYM,GAwBNE,CAAoBJ,EAAO7C,SANnC,IAAK,IAAIA,KAAOwC,EAAW,EAAlBxC,GAeLtB,EAAM0C,UACRwB,EAAoB,kBAAC,IAAD,OAEtB,IAAIM,EAAe,KACfxE,EAAM4C,QACR4B,EAAe,2BAAIxE,EAAM4C,MAAM6B,UAGjC,IAAIC,EAAe,KAKnB,OAJI1E,EAAM6C,kBACR6B,EAAe,kBAAC,IAAD,CAAUC,GAAI3E,EAAM+C,oBAInC,yBAAKpC,UAAWR,IAAQyE,MACrBF,EACAF,EACD,2BAAIjB,EAAW,SAAW,UAC1B,0BAAMsB,SAhDY,SAACV,GACrBA,EAAMW,iBACN9E,EAAMoD,OAAOU,EAAST,MAAMrC,MAAO8C,EAASR,SAAStC,MAAOuC,KA+CvDW,EACD,kBAAC,IAAD,CAAQa,QAAQ,WAAhB,WAEF,kBAAC,IAAD,CAAQA,QAAQ,SAASC,QA/CC,WAK5BhB,GAAY,SAACiB,GAAD,OAAgBA,OA0C1B,aACa1B,EAAW,SAAW","file":"static/js/4.49cf52b0.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classes from \"./Input.module.scss\";\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n  let validationError = null;\n\n  if (!props.valid && props.validation && props.touched) {\n    inputClasses.push(classes.Invalid);\n    validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      let options = props.elementConfig.options.map((option) => {\n        return (\n          <option key={option.value} value={option.value}>\n            {option.displayValue}\n          </option>\n        );\n      });\n      inputElement = (\n        <select className={inputClasses.join(\" \")} value={props.value} onChange={props.changed}>\n          {options}\n        </select>\n      );\n      break;\n\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}> {props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\ninput.propTypes = {};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__SNRl4\",\"Label\":\"Input_Label__3w96u\",\"InputElement\":\"Input_InputElement__pO52w\",\"Invalid\":\"Input_Invalid__3aeyU\",\"ValidationError\":\"Input_ValidationError__2fHal\"};","export const checkValidity = (value, rules) => {\n  let isValid = true;\n  if (!rules) {\n    return true;\n  }\n\n  if (rules.required) {\n    isValid = value.trim() !== \"\" && isValid;\n  }\n\n  if (rules.minLength) {\n    isValid = value.length >= rules.minLength && isValid;\n  }\n\n  if (rules.maxLength) {\n    isValid = value.length <= rules.maxLength && isValid;\n  }\n\n  if (rules.isEmail) {\n    const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isNumeric) {\n    const pattern = /^\\d+$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  return isValid;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__7JmWy\"};","import React, { Component, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.scss\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { checkValidity } from \"../../shared/utility\";\n\nimport * as actions from \"../../store/actions/index\";\n\nconst Auth = (props) => {\n  const [controls, setControls] = useState({\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Mail Address\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"Password\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 6,\n      },\n      valid: false,\n      touched: false,\n    },\n  });\n\n  const [isSignup, setIsSignup] = useState(true);\n\n  //////////////////////// Hey ! I agree with you, I feel like it's unnecessary since we\n  // redirect to \"/\" in the Checkout component when we don't have any ingredients.\n  // componentDidMount() {\n  // }\n\n  const { buildingBurger, authRedirectPath, onSetAuthRedirectPath } = props;\n\n  useEffect(() => {\n    if (!buildingBurger && authRedirectPath !== \"/\") {\n      onSetAuthRedirectPath(\"/\");\n    }\n  }, [buildingBurger, authRedirectPath, onSetAuthRedirectPath]);\n  ////////////////////////////////////////////////////////////////////////////\n\n  const inputChangedHandler = (event, controlName) => {\n    // what follows is deep copying\n\n    // const updatedControls = { ...this.state.controls };\n\n    // const updatedControl = { ...updatedControls[controlName] };\n\n    // updatedControl.value = event.target.value;\n    // updatedControl.valid = this.checkValidity(updatedControl.value, updatedControl.validation);\n    // updatedControl.touched = true;\n\n    // updatedControls[controlName] = updatedControl;\n\n    // same as above\n    const updatedControls = {\n      ...controls,\n      [controlName]: {\n        ...controls[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, controls[controlName].validation),\n        touched: true,\n      },\n    };\n\n    // let formIsValid = true;\n    // for (let controlName in updatedControls) {\n    //   if (updatedControls.hasOwnProperty(controlName)) {\n    //     formIsValid = updatedControls[controlName].valid && formIsValid;\n    //   }\n    // }\n\n    // this.setState({ controls: updateControls, formIsValid });\n\n    // this.setState({ controls: updatedControls });\n    setControls(updatedControls);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onAuth(controls.email.value, controls.password.value, isSignup);\n  };\n\n  const switchAuthModeHandler = () => {\n    // this.setState((prevState) => {\n    //   return { isSignup: !prevState.isSignup };\n    // });\n\n    setIsSignup((prevState) => !prevState);\n  };\n\n  let formElementsArray = [];\n\n  for (let key in controls) {\n    formElementsArray.push(\n      <Input\n        key={key}\n        {...controls[key]}\n        changed={(event) => {\n          inputChangedHandler(event, key);\n          {\n            /* <Input key=\"...\" elementType=\"...\" elementConfig=\"{...}\" value=\"...\" changed=\"...\"/> */\n          }\n        }}\n      />\n    );\n  }\n\n  if (props.loading) {\n    formElementsArray = <Spinner />;\n  }\n  let errorMessage = null;\n  if (props.error) {\n    errorMessage = <p>{props.error.message}</p>;\n  }\n\n  let authRedirect = null;\n  if (props.isAuthenticated) {\n    authRedirect = <Redirect to={props.authRedirectPath} />;\n  }\n\n  return (\n    <div className={classes.Auth}>\n      {authRedirect}\n      {errorMessage}\n      <p>{isSignup ? \"SIGNUP\" : \"SIGNIN\"}</p>\n      <form onSubmit={submitHandler}>\n        {formElementsArray}\n        <Button btnType=\"Success\">SUBMIT</Button>\n      </form>\n      <Button btnType=\"Danger\" clicked={switchAuthModeHandler}>\n        SWITCH TO {isSignup ? \"SIGNIN\" : \"SIGNUP\"}\n      </Button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.authReducer.loading,\n  error: state.authReducer.error,\n  isAuthenticated: state.authReducer.token !== null,\n  authRedirectPath: state.authReducer.authRedirectPath,\n  buildingBurger: state.burgerBuilderReducer.building,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n  onSetAuthRedirectPath: (path) => dispatch(actions.setAuthRedirectPath(path)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}