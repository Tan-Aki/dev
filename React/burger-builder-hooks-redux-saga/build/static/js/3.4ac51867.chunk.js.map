{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","shared/utility.js","components/Order/CheckoutSummary/CheckoutSummary.module.scss","containers/Checkout/ContactData/ContactData.module.scss","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","validationError","valid","validation","touched","push","Invalid","className","ValidationError","elementType","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilderReducer","price","totalPrice","loading","orderReducer","token","authReducer","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","type","placeholder","street","zipCode","country","email","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","event","inputIdentifier","updatedOrderForm","updatedFormElement","target","hasOwnProperty","inputChangedHandler","form","onSubmit","preventDefault","console","log","formData","formElementIdentifier","order","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.4ac51867.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classes from \"./Input.module.scss\";\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n  let validationError = null;\n\n  if (!props.valid && props.validation && props.touched) {\n    inputClasses.push(classes.Invalid);\n    validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      let options = props.elementConfig.options.map((option) => {\n        return (\n          <option key={option.value} value={option.value}>\n            {option.displayValue}\n          </option>\n        );\n      });\n      inputElement = (\n        <select className={inputClasses.join(\" \")} value={props.value} onChange={props.changed}>\n          {options}\n        </select>\n      );\n      break;\n\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}> {props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\ninput.propTypes = {};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__SNRl4\",\"Label\":\"Input_Label__3w96u\",\"InputElement\":\"Input_InputElement__pO52w\",\"Invalid\":\"Input_Invalid__3aeyU\",\"ValidationError\":\"Input_ValidationError__2fHal\"};","export const checkValidity = (value, rules) => {\n  let isValid = true;\n  if (!rules) {\n    return true;\n  }\n\n  if (rules.required) {\n    isValid = value.trim() !== \"\" && isValid;\n  }\n\n  if (rules.minLength) {\n    isValid = value.length >= rules.minLength && isValid;\n  }\n\n  if (rules.maxLength) {\n    isValid = value.length <= rules.maxLength && isValid;\n  }\n\n  if (rules.isEmail) {\n    const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isNumeric) {\n    const pattern = /^\\d+$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  return isValid;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3QfUK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2aETv\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Burger from \"../../Burger/Burger\";\nimport Button from \"../../UI/Button/Button\";\nimport classes from \"./CheckoutSummary.module.scss\";\n\nconst checkoutSummary = (props) => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it tastes well !</h1>\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\n        CANCEL\n      </Button>\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\n        CONTINUE\n      </Button>\n    </div>\n  );\n};\n\ncheckoutSummary.propTypes = {};\n\nexport default checkoutSummary;\n","import React, { Component, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.scss\";\nimport axios from \"../../../axios-orders\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/order\";\nimport { checkValidity } from \"../../../shared/utility\";\n\nconst ContactData = (props) => {\n  const [orderForm, setOrderForm] = useState({\n    name: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Your name\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    street: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Street\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    zipCode: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Zip Code\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5,\n      },\n      valid: false,\n      touched: false,\n    },\n    country: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Country\",\n      },\n      value: \"\",\n      validation: {\n        required: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Email\",\n      },\n      value: \"\",\n      validation: {\n        isEmail: true,\n        required: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    deliveryMethod: {\n      elementType: \"select\",\n      elementConfig: {\n        options: [\n          { value: \"fastest\", displayValue: \"Fastest\" },\n          { value: \"cheapest\", displayValue: \"Cheapest\" },\n        ],\n      },\n      value: \"fastest\",\n      validation: {},\n      touched: false,\n      valid: true,\n    },\n  });\n\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  // orderHandler = async (event) => {\n  //   event.preventDefault();\n  //   console.log(this.props.ingredients);\n\n  //   this.setState({ loading: true });\n\n  //   const formData = {};\n\n  //   for (let formElementIdentifier in this.state.orderForm) {\n  //     if (this.state.orderForm.hasOwnProperty(formElementIdentifier)) {\n  //       formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n  //     }\n  //   }\n\n  //   const order = {\n  //     ingredients: this.props.ings,\n  //     price: this.props.price, // shouldnt be done in production environement. should be calculated server side to avoid data being tempered\n  //     orderData: formData,\n  //   };\n  //   try {\n  //     const response = await axios.post(\"/orders.json\", order); // .json for firebase\n  //     console.log(\"response :\", response);\n  //     this.setState({ loading: false });\n  //     this.props.history.push(\"/\");\n  //   } catch (err) {\n  //     console.log(err);\n  //     this.setState({ loading: false });\n  //   }\n  // };\n  const orderHandler = (event) => {\n    event.preventDefault();\n    console.log(props.ings);\n\n    const formData = {};\n\n    for (let formElementIdentifier in orderForm) {\n      if (orderForm.hasOwnProperty(formElementIdentifier)) {\n        formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n      }\n    }\n\n    const order = {\n      ingredients: props.ings,\n      price: props.price, // shouldnt be done in production environement. should be calculated server side to avoid data being tempered\n      orderData: formData,\n      userId: props.userId,\n    };\n\n    props.onOrderBurger(order, props.token);\n  };\n\n  const inputChangedHandler = (event, inputIdentifier) => {\n    // what follows is deep copying\n\n    const updatedOrderForm = { ...orderForm };\n\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier] };\n\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = checkValidity(\n      event.target.value,\n      orderForm[inputIdentifier].validation\n    );\n    updatedFormElement.touched = true;\n\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      if (updatedOrderForm.hasOwnProperty(inputIdentifier)) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n    }\n    setOrderForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n\n    // setState({ orderForm: updatedOrderForm, formIsValid });\n  };\n\n  const formElementsArray = [];\n\n  for (let key in orderForm) {\n    formElementsArray.push(\n      <Input\n        key={key}\n        {...orderForm[key]}\n        changed={(event) => {\n          inputChangedHandler(event, key);\n        }}\n      />\n    );\n  }\n\n  let form = (\n    <form onSubmit={orderHandler}>\n      {/* <Input elementType=\"...\" elementConfig=\"...\" value=\"...\" /> */}\n      {formElementsArray}\n      <Button btnType=\"Success\" disabled={!formIsValid}>\n        ORDER\n      </Button>\n    </form>\n  );\n\n  if (props.loading) {\n    form = <Spinner />;\n  }\n\n  return (\n    <div className={classes.ContactData}>\n      <h4>Enter your Contact Data</h4>\n      {form}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  ings: state.burgerBuilderReducer.ingredients,\n  price: state.burgerBuilderReducer.totalPrice,\n  loading: state.orderReducer.loading,\n  token: state.authReducer.token,\n  userId: state.authReducer.userId,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\n","import React, { Component } from \"react\";\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport ContactData from \"./ContactData/ContactData\";\nimport * as actions from \"../../store/actions/index\";\n\nconst Checkout = (props) => {\n  // state = {\n  //   ingredients: null,\n  //   price: 0,\n  // };\n\n  // componentWillMount() {\n  //   const query = new URLSearchParams(this.props.location.search);\n  //   const ingredients = {};\n  //   console.log(query.entries);\n  //   let price = 0;\n\n  //   for (let param of query.entries()) {\n  //     //['salad', '1']\n\n  //     if (param[0] === \"price\") {\n  //       price = param[1];\n  //     } else {\n  //       ingredients[param[0]] = +param[1]; // converted to number by adding a +\n  //     }\n  //   }\n\n  //   this.setState({ ingredients, totalPrice: price });\n  // }\n\n  const checkoutCancelledHandler = () => {\n    props.history.goBack();\n  };\n\n  const checkoutContinuedHandler = () => {\n    props.history.replace(\"/checkout/contact-data\");\n  };\n\n  let summary = <Redirect to=\"/\" />;\n  if (props.ings) {\n    const purchasedRedirect = props.purchased ? <Redirect to=\"/\" /> : null;\n    summary = (\n      <div>\n        {purchasedRedirect}\n        <CheckoutSummary\n          ingredients={props.ings}\n          checkoutCancelled={checkoutCancelledHandler}\n          checkoutContinued={checkoutContinuedHandler}\n        />\n        <Route\n          path={props.match.path + \"/contact-data\"}\n          component={ContactData}\n\n          // trick to pass some props to the route, instead of using Component, we use render with an arrow function\n          // we don't get the props history property with that though..\n          // so we pass the props we got from the checkout route to the COntactData\n        />\n      </div>\n    );\n  }\n  return summary;\n};\n\nconst mapStateToProps = (state) => ({\n  ings: state.burgerBuilderReducer.ingredients,\n  purchased: state.orderReducer.purchased,\n});\n\nexport default connect(mapStateToProps)(Checkout);\n"],"sourceRoot":""}